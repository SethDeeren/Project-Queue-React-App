const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('user');

// the arrow functions in both serialize and deserialize are callbacks occuring after serialize and deserialize are done
passport.serializeUser((user, done) => {
  // user.id reference the id generated by mongodb (this is going to the client)
  done(null, user.id);
});

passport.deserializeUser((id, done) => {
  //id is the user.id prevuosly passed in serializeUser (this is coming from the client)
  User.findById(id).then((user) => {
    done(null, user);
  });
});

// passport can be configured with many strategies Google Strategy is just one
passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true,
    },
    // this call back is when we get the user information back from google and the opportunity to do somthing with it like save it to db
    // accessToken expire so refreshToken is an updated one from google
    async (accessToken, refreshToken, profile, done) => {
      console.log(profile);

      const existingUser = await User.findOne({ googleId: profile.id });

      if (existingUser) {
        //we already have  a record with given profile ID
        done(null, existingUser);
      } else {
        //we don't have a user record with this ID, make a new record
        console.log('no existing user');
        const user = await new User({
          name: profile.displayName,
          googleId: profile.id,
        }).save();

        done(null, user);
      }
    }
  )
);
